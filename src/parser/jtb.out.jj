//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
import syntaxtree.*;
import java.util.Vector;


public class MiniJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
}

TOKEN :
{
   <CLASS: "class">
   | <PUBLIC: "public">
   | <STATIC: "static">
   | <VOID: "void">
   | <MAIN: "main">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <STRING: "String">
   | <EXTENDS: "extends">
   | <RETURN: "return">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <PRINT: "System.out.println">
   | <LENGTH: "length">
   | <NEW: "new">
   | <THIS: "this">
   | <TYPE_INT: "int">
   | <TYPE_BOOL: "boolean">
   | <INTEGER_LITERAL: (["0"-"9"])+>
   | <BOOLEAN_LITERAL: "true" | "false">
   | <OPERATOR: "&&" | "<" | "+" | "-" | "*">
   | <IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

Goal Goal() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDeclaration n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=MainClass()
   (
      n2=ClassDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new Goal(n0,n1,n3); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   Statement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4=<LBRACE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PUBLIC> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<STATIC> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<VOID> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<MAIN> { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=<LPAREN> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<STRING> { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="[" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="]" { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=Identifier()
   n23=<RPAREN> { n22 = JTBToolkit.makeNodeToken(n23); }
   n25=<LBRACE> { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=Statement()
   n28=<RBRACE> { n27 = JTBToolkit.makeNodeToken(n28); }
   n30=<RBRACE> { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDeclaration n11;
   NodeListOptional n12 = new NodeListOptional();
   MethodDeclaration n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      n6=<EXTENDS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   n9=<LBRACE> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      n11=VarDeclaration()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      n13=MethodDeclaration()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n15=<RBRACE> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ClassDeclaration(n0,n2,n3,n8,n10,n12,n14); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   Type n8;
   Identifier n9;
   NodeListOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Type n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeListOptional n20 = new NodeListOptional();
   VarDeclaration n21;
   NodeListOptional n22 = new NodeListOptional();
   Statement n23;
   NodeToken n24;
   Token n25;
   Expression n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1=<PUBLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5=<LPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n10 = new NodeListOptional(); }
      { n7 = new NodeSequence(3); }
      n8=Type()
      { n7.addNode(n8); }
      n9=Identifier()
      { n7.addNode(n9); }
      (
         { n11 = new NodeSequence(3); }
         n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=Type()
         { n11.addNode(n14); }
         n15=Identifier()
         { n11.addNode(n15); }
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   n17=<RPAREN> { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=<LBRACE> { n18 = JTBToolkit.makeNodeToken(n19); }
   (
      LOOKAHEAD(2)
      n21=VarDeclaration()
      { n20.addNode(n21); }
   )*
   { n20.nodes.trimToSize(); }
   (
      n23=Statement()
      { n22.addNode(n23); }
   )*
   { n22.nodes.trimToSize(); }
   n25=<RETURN> { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=Expression()
   n28=";" { n27 = JTBToolkit.makeNodeToken(n28); }
   n30=<RBRACE> { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new MethodDeclaration(n0,n2,n3,n4,n6,n16,n18,n20,n22,n24,n26,n27,n29); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDeclaration(n0,n1,n2); }
}

Type Type() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Identifier n12;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<TYPE_INT> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            { n5 = new NodeSequence(2); }
            n7="[" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5.addNode(n6); }
            n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5.addNode(n8); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      n11=<TYPE_BOOL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 1); }
   |
      n12=Identifier()
      { n0 = new NodeChoice(n12, 2); }
   )
   
   { return new Type(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Expression n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   Statement n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Expression n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Expression n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   Identifier n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   Expression n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   Expression n50;
   NodeToken n51;
   Token n52;

   
}
{
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<LBRACE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n5=Statement()
            { n4.addNode(n5); }
         )*
         { n4.nodes.trimToSize(); }
         { n1.addNode(n4); }
         n7=<RBRACE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n8 = new NodeSequence(7); }
         n10=<IF> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<LPAREN> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         n13=Expression()
         { n8.addNode(n13); }
         n15=<RPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n8.addNode(n14); }
         n16=Statement()
         { n8.addNode(n16); }
         n18=<ELSE> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n8.addNode(n17); }
         n19=Statement()
         { n8.addNode(n19); }
         
      )
      { n0 = new NodeChoice(n8, 1); }
   |
      (
         { n20 = new NodeSequence(5); }
         n22=<WHILE> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n24=<LPAREN> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n20.addNode(n23); }
         n25=Expression()
         { n20.addNode(n25); }
         n27=<RPAREN> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n20.addNode(n26); }
         n28=Statement()
         { n20.addNode(n28); }
         
      )
      { n0 = new NodeChoice(n20, 2); }
   |
      (
         { n29 = new NodeSequence(5); }
         n31=<PRINT> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
         n33=<LPAREN> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n29.addNode(n32); }
         n34=Expression()
         { n29.addNode(n34); }
         n36=<RPAREN> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n29.addNode(n35); }
         n38=";" { n37 = JTBToolkit.makeNodeToken(n38); }
         { n29.addNode(n37); }
         
      )
      { n0 = new NodeChoice(n29, 3); }
   |
      (
         { n39 = new NodeSequence(5); }
         n40=Identifier()
         { n39.addNode(n40); }
         (
            { n42 = new NodeSequence(3); }
            n44="[" { n43 = JTBToolkit.makeNodeToken(n44); }
            { n42.addNode(n43); }
            n45=Expression()
            { n42.addNode(n45); }
            n47="]" { n46 = JTBToolkit.makeNodeToken(n47); }
            { n42.addNode(n46); }
            { n41.addNode(n42); }
         )?
         { n39.addNode(n41); }
         n49="=" { n48 = JTBToolkit.makeNodeToken(n49); }
         { n39.addNode(n48); }
         n50=Expression()
         { n39.addNode(n50); }
         n52=";" { n51 = JTBToolkit.makeNodeToken(n52); }
         { n39.addNode(n51); }
         
      )
      { n0 = new NodeChoice(n39, 4); }
   )
   
   { return new Statement(n0); }
}

Expression Expression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   Expression n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeListOptional n36 = new NodeListOptional();
   NodeChoice n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeChoice n41;
   NodeToken n42;
   Token n43;
   NodeSequence n44;
   Identifier n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48;
   NodeSequence n49;
   Expression n50;
   NodeListOptional n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   Expression n55;
   NodeToken n56;
   Token n57;
   NodeSequence n58;
   NodeToken n59;
   Token n60;
   Expression n61;
   NodeToken n62;
   Token n63;
   NodeSequence n64;
   NodeToken n65;
   Token n66;
   Expression n67;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<NEW> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            (
               (
                  { n5 = new NodeSequence(4); }
                  n7=<TYPE_INT> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5.addNode(n6); }
                  n9="[" { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5.addNode(n8); }
                  n10=Expression()
                  { n5.addNode(n10); }
                  n12="]" { n11 = JTBToolkit.makeNodeToken(n12); }
                  { n5.addNode(n11); }
                  
               )
               { n4 = new NodeChoice(n5, 0); }
            |
               (
                  { n13 = new NodeSequence(3); }
                  n14=Identifier()
                  { n13.addNode(n14); }
                  n16=<LPAREN> { n15 = JTBToolkit.makeNodeToken(n16); }
                  { n13.addNode(n15); }
                  n18=<RPAREN> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n13.addNode(n17); }
                  
               )
               { n4 = new NodeChoice(n13, 1); }
            )
            
         )
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n20=<INTEGER_LITERAL> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 1); }
      |
         n22=<BOOLEAN_LITERAL> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 2); }
      |
         n23=Identifier()
         { n0 = new NodeChoice(n23, 3); }
      |
         n25=<THIS> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n0 = new NodeChoice(n24, 4); }
      |
         (
            { n26 = new NodeSequence(2); }
            n28="!" { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
            n29=Expression()
            { n26.addNode(n29); }
            
         )
         { n0 = new NodeChoice(n26, 5); }
      |
         (
            { n30 = new NodeSequence(3); }
            n32=<LPAREN> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n30.addNode(n31); }
            n33=Expression()
            { n30.addNode(n33); }
            n35=<RPAREN> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n30.addNode(n34); }
            
         )
         { n0 = new NodeChoice(n30, 6); }
      )
      
   )
   (
      LOOKAHEAD(2)
      { n48 = new NodeOptional(); }
      (
         (
            (
               { n38 = new NodeSequence(2); }
               n40="." { n39 = JTBToolkit.makeNodeToken(n40); }
               { n38.addNode(n39); }
               (
                  (
                     n43=<LENGTH> { n42 = JTBToolkit.makeNodeToken(n43); }
                     { n41 = new NodeChoice(n42, 0); }
                  |
                     (
                        { n44 = new NodeSequence(4); }
                        n45=Identifier()
                        { n44.addNode(n45); }
                        n47=<LPAREN> { n46 = JTBToolkit.makeNodeToken(n47); }
                        { n44.addNode(n46); }
                        (
                           { n51 = new NodeListOptional(); }
                           { n49 = new NodeSequence(2); }
                           n50=Expression()
                           { n49.addNode(n50); }
                           (
                              { n52 = new NodeSequence(2); }
                              n54="," { n53 = JTBToolkit.makeNodeToken(n54); }
                              { n52.addNode(n53); }
                              n55=Expression()
                              { n52.addNode(n55); }
                              { n51.addNode(n52); }
                           )*
                           { n51.nodes.trimToSize(); }
                           { n49.addNode(n51); }
                           { n48.addNode(n49); }
                        )?
                        { n44.addNode(n48); }
                        n57=<RPAREN> { n56 = JTBToolkit.makeNodeToken(n57); }
                        { n44.addNode(n56); }
                        
                     )
                     { n41 = new NodeChoice(n44, 1); }
                  )
                  
               )
               { n38.addNode(n41); }
               
            )
            { n37 = new NodeChoice(n38, 0); }
         |
            (
               { n58 = new NodeSequence(3); }
               n60="[" { n59 = JTBToolkit.makeNodeToken(n60); }
               { n58.addNode(n59); }
               n61=Expression()
               { n58.addNode(n61); }
               n63="]" { n62 = JTBToolkit.makeNodeToken(n63); }
               { n58.addNode(n62); }
               
            )
            { n37 = new NodeChoice(n58, 1); }
         |
            (
               { n64 = new NodeSequence(2); }
               n66=<OPERATOR> { n65 = JTBToolkit.makeNodeToken(n66); }
               { n64.addNode(n65); }
               n67=Expression()
               { n64.addNode(n67); }
               
            )
            { n37 = new NodeChoice(n64, 2); }
         )
         
      )
      { n36.addNode(n37); }
   )*
   { n36.nodes.trimToSize(); }
   
   { return new Expression(n0,n36); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}
