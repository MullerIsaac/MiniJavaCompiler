package Symbol;import java.util.HashMap;class Binder<V> {    V value;    Symbol prevtop;    Binder<V> tail;    Binder(V v, Symbol p, Binder<V> t) {	value = v;	prevtop = p;	tail = t;    }}public class Table<V> {    private HashMap<Symbol, Binder<V>> dict = new HashMap<Symbol, Binder<V>>();    private Symbol top;    private Binder<V> marks;    public Table() {}    public V get(Symbol key) {	Binder<V> e = dict.get(key);	if (e == null) return null;	else return e.value;    }    public void put(Symbol key, V value) {	dict.put(key, new Binder<V>(value, top, dict.get(key)));	top = key;    }    public void beginScope() {	marks = new Binder<V>(null,top,marks); top=null;    }    public void endScope() {	while (top!=null) {	    Binder<V> e = dict.get(top);	    if (e.tail!=null) dict.put(top,e.tail);	    else dict.remove(top);	    top = e.prevtop;	}	top=marks.prevtop;	marks=marks.tail;    }    public java.util.Set keys() {	return dict.keySet();    }}