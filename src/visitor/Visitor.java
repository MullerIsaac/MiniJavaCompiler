//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */

public interface Visitor {

   //
   // void Auto class visitors
   //

   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( ClassDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n);

   /**
    * f0 -> <CLASS>
    * f1 -> Identifier()
    * f2 -> <LBRACE>
    * f3 -> <PUBLIC>
    * f4 -> <STATIC>
    * f5 -> <VOID>
    * f6 -> <MAIN>
    * f7 -> <LPAREN>
    * f8 -> <STRING>
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> <RPAREN>
    * f13 -> <LBRACE>
    * f14 -> Statement()
    * f15 -> <RBRACE>
    * f16 -> <RBRACE>
    */
   public void visit(MainClass n);

   /**
    * f0 -> <CLASS>
    * f1 -> Identifier()
    * f2 -> [ <EXTENDS> Identifier() ]
    * f3 -> <LBRACE>
    * f4 -> ( VarDeclaration() )*
    * f5 -> ( MethodDeclaration() )*
    * f6 -> <RBRACE>
    */
   public void visit(ClassDeclaration n);

   /**
    * f0 -> <PUBLIC>
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> <LPAREN>
    * f4 -> [ Type() Identifier() ( "," Type() Identifier() )* ]
    * f5 -> <RPAREN>
    * f6 -> <LBRACE>
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> <RETURN>
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> <RBRACE>
    */
   public void visit(MethodDeclaration n);

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n);

   /**
    * f0 -> ( <TYPE_INT> [ "[" "]" ] )
    *       | <TYPE_BOOL>
    *       | Identifier()
    */
   public void visit(Type n);

   /**
    * f0 -> ( <LBRACE> ( Statement() )* <RBRACE> )
    *       | ( <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement() )
    *       | ( <WHILE> <LPAREN> Expression() <RPAREN> Statement() )
    *       | ( <PRINT> <LPAREN> Expression() <RPAREN> ";" )
    *       | ( Identifier() [ "[" Expression() "]" ] "=" Expression() ";" )
    */
   public void visit(Statement n);

   /**
    * f0 -> ( <NEW> ( ( <TYPE_INT> "[" Expression() "]" ) | ( Identifier() <LPAREN> <RPAREN> ) ) | <INTEGER_LITERAL> | <BOOLEAN_LITERAL> | Identifier() | <THIS> | ( "!" Expression() ) | ( <LPAREN> Expression() <RPAREN> ) )
    * f1 -> ( ( ( "." ( <LENGTH> | ( Identifier() <LPAREN> [ Expression() ( "," Expression() )* ] <RPAREN> ) ) ) | ( "[" Expression() "]" ) | ( <OPERATOR> Expression() ) ) )*
    */
   public void visit(Expression n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n);

}

