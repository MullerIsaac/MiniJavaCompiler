//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( ClassDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> <CLASS>
    * f1 -> Identifier()
    * f2 -> <LBRACE>
    * f3 -> <PUBLIC>
    * f4 -> <STATIC>
    * f5 -> <VOID>
    * f6 -> <MAIN>
    * f7 -> <LPAREN>
    * f8 -> <STRING>
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> <RPAREN>
    * f13 -> <LBRACE>
    * f14 -> Statement()
    * f15 -> <RBRACE>
    * f16 -> <RBRACE>
    */
   public void visit(MainClass n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> <CLASS>
    * f1 -> Identifier()
    * f2 -> [ <EXTENDS> Identifier() ]
    * f3 -> <LBRACE>
    * f4 -> ( VarDeclaration() )*
    * f5 -> ( MethodDeclaration() )*
    * f6 -> <RBRACE>
    */
   public void visit(ClassDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
   }

   /**
    * f0 -> <PUBLIC>
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> <LPAREN>
    * f4 -> [ Type() Identifier() ( "," Type() Identifier() )* ]
    * f5 -> <RPAREN>
    * f6 -> <LBRACE>
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> <RETURN>
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> <RBRACE>
    */
   public void visit(MethodDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> ( <TYPE_INT> [ "[" "]" ] )
    *       | <TYPE_BOOL>
    *       | Identifier()
    */
   public void visit(Type n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <LBRACE> ( Statement() )* <RBRACE> )
    *       | ( <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement() )
    *       | ( <WHILE> <LPAREN> Expression() <RPAREN> Statement() )
    *       | ( <PRINT> <LPAREN> Expression() <RPAREN> ";" )
    *       | ( Identifier() [ "[" Expression() "]" ] "=" Expression() ";" )
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <NEW> ( ( <TYPE_INT> "[" Expression() "]" ) | ( Identifier() <LPAREN> <RPAREN> ) ) | <INTEGER_LITERAL> | <BOOLEAN_LITERAL> | Identifier() | <THIS> | ( "!" Expression() ) | ( <LPAREN> Expression() <RPAREN> ) )
    * f1 -> ( ( ( "." ( <LENGTH> | ( Identifier() <LPAREN> [ Expression() ( "," Expression() )* ] <RPAREN> ) ) ) | ( "[" Expression() "]" ) | ( <OPERATOR> Expression() ) ) )*
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

}
